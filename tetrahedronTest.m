classdef tetrahedronTest < matlab.unittest.TestCase
    %TETRAHEDRONTEST 
    % Test class for testing the matrix that is returned from
    % tetrahedron2matrix function
    
    properties (TestParameter)
        vertices = struct(...
            'unitTetrahedron', [0 0 0;1 0 0;0 1 0;0 0 1],...
            'unitTetrahedronDisplaced', [2 2 0;3 2 0;0 1 0;2 2 1],...
            'unitTetrahedronMirrored', [1 1 1;1 0 0;0 1 0;0 0 1]);
        random_vertices = struct(...
            'randomVertices1', randi(10, 50,  3),... % mesh with 50 vertices
            'randomVertices2', randi(10, 50,  3),...
            'randomVertices3', randi(10, 50,  3),...
            'randomVertices4', randi(10, 50,  3),...
            'randomVertices5', randi(10, 50,  3)...
            );
        tetrahedrons = struct(...
            'unitTetrahedron', [1 2 3 4],...
            'unitTetrahedronDisplaced', [1 2 3 4],...
            'unitTetrahedronMirrored', [1 2 3 4]);
        random_tetrahedrons = struct(...
            'tetrahedron1', randperm(50,4),...
            'tetrahedron2', randperm(50, 4),...
            'tetrahedron3', randperm(50, 4),...
            'tetrahedron4', randperm(50, 4),...
            'tetrahedron5', randperm(50, 4)...
            );
    end
    
    methods (TestMethodSetup)
        function MethodSetup(testCase)
            orig = rng;
            testCase.addTeardown(@rng, orig)
            rng(42) % Answer to the Ultimate Question of Life, the Universe, and Everything.
        end
    end
    
    methods (Test, ParameterCombination='sequential')
        function testDimensions(testCase, vertices, tetrahedrons)
            actSolution = size(tetrahedron2matrix(tetrahedrons, vertices));
            expSolution = [4 4];
            testCase.verifyEqual(actSolution, expSolution, ... 
                'Return matrix should be 4x4');
        end
        function testSymmetry(testCase, vertices, tetrahedrons)
            actSolution = tetrahedron2matrix(tetrahedrons, vertices);
            expSolution = actSolution';
            testCase.verifyEqual(actSolution, expSolution, ... 
                'The returned matrix has to be symmetric');
        end
        function testMappingToGlobal(testCase, tetrahedrons, vertices)
            actSolution = map2global(tetrahedrons, vertices);
            expSolution = ones(3);
            testCase.verifyEqual(actSolution, expSolution, ... 
                'The mapping of tetrahedron failed!');
        end
    end
end

